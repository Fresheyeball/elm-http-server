var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var log = function log(x) {
    return (function () {
        console.log('x->', x);
        return x;
    })();
};
var make = function make(localRuntime) {
    return function () {
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        return (function () {
            sanitize(localRuntime, 'Native', 'VDOMtoHTML');
            return function () {
                var vø1 = localRuntime.Native.VDOMtoHTML.values;
                return vø1 ? vø1 : localRuntime.Native.VDOMtoHTML.values = { 'toHTML': require('vdom-to-html') };
            }.call(this);
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'VDOMtoHTML');
Elm.Native.VDOMtoHTML.make = make;
typeof(window) == 'undefined' ? window = global : void 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwibG9nIiwieCIsImNvbnNvbGUiLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJ2w7gxIiwiTmF0aXZlLlZET010b0hUTUwudmFsdWVzIiwicmVxdWlyZSIsIk5hdGl2ZS5WRE9NdG9IVE1MLm1ha2UiLCJ0eXBlb2YiLCJ3aW5kb3ciLCJnbG9iYWwiXSwibWFwcGluZ3MiOiJBQUFBLElBQU9BLFFBQUEsR0FBUCxTQUFPQSxRQUFQLENBQ0dDLE1BREgsRTtRQUNZQyxNQUFBLEc7SUFDVixPQUFDQSxNQUFBLENBQU9DLE1BQVIsQ0FBZSxVQUFLQyxDQUFMLEVBQU9DLEtBQVAsRUFBYztBQUFBLGUsYUFDM0I7QUFBQSxZQUFVRCxDQUFOLENBQVFDLEtBQVIsQ0FBSixHLE1BQUEsR0FBbUNELENBQU4sQ0FBUUMsS0FBUixDQUFOLEdBQXFCLEVBQTVDO0FBQUEsWUFDQSxPQUFNRCxDQUFOLENBQVFDLEtBQVIsRUFEQTtBQUFBLFMsQ0FBQSxFQUQyQjtBQUFBLEtBQTdCLEVBR0FKLE1BSEEsRTtDQUZGO0FBT0EsSUFBT0ssR0FBQSxHQUFQLFNBQU9BLEdBQVAsQ0FBWUMsQ0FBWixFQUFlO0FBQUEsVyxhQUFJO0FBQUEsUUFBTUMsT0FBTCxDQUFDRixHQUFGLENBQWMsS0FBZCxFQUFvQkMsQ0FBcEI7QUFBQSxRQUF1QixPQUFBQSxDQUFBLENBQXZCO0FBQUEsSyxDQUFBLEVBQUo7QUFBQSxDQUFmLENBUEE7QUFTQSxJQUFPRSxJQUFBLEdBQVAsU0FBT0EsSUFBUCxDQUNHQyxZQURILEVBQ2lCO0FBQUEsVyxZQUNkO0FBQUEsWUFBQUMsTSxHQUFNQyxHQUFBLENBQUlDLGdCQUFMLENBQXNCSCxZQUF0QixDQUFMO0FBQUEsUUFDRCxPLGFBQUk7QUFBQSxZQUFDVixRQUFELENBQVVVLFlBQVYsRSxRQUFBLEUsWUFBQTtBQUFBLFlBQ0YsTyxZQUFNO0FBQUEsb0JBQUFJLEcsR0FBRUosWUFBQSxDQUFhSyx3QkFBZjtBQUFBLGdCQUNKLE9BQUlELEdBQUosR0FBTUEsR0FBTixHQUFjSixZQUFBLENBQWFLLHdCQUFuQixHQUE0QyxFLFVBQ3pDQyxPQUFELEMsY0FBQSxDQUQwQyxFQUFwRCxDQURJO0FBQUEsYSxLQUFOLEMsSUFBQSxFQURFO0FBQUEsUyxDQUFBLEVBQUosQ0FEQztBQUFBLEssS0FEYyxDLElBQUE7QUFBQSxDQURqQixDQVRBO0FBaUJDaEIsUUFBRCxDQUFVWSxHQUFWLEUsUUFBQSxFLFlBQUEsRUFqQkE7QUFrQk1BLEdBQUEsQ0FBSUssc0JBQVYsR0FBaUNSLElBQWpDLENBbEJBO0FBb0JTUyxNQUFELENBQVFDLE1BQVIsQ0FBSixJLFdBQUosR0FBMENBLE1BQU4sR0FBYUMsTUFBakQsRyxNQUFBIiwic291cmNlc0NvbnRlbnQiOlsiKGRlZm4tIHNhbml0aXplXG4gIFtyZWNvcmQgJiBzcGFjZXNdXG4gIChzcGFjZXMucmVkdWNlIChmbiBbciBzcGFjZV0gKGRvXG4gICAgKGlmIChhZ2V0IHIgc3BhY2UpIG5pbCAoc2V0ISAoYWdldCByIHNwYWNlKSB7fSkpXG4gICAgKGFnZXQgciBzcGFjZSkpKVxuICByZWNvcmQpKVxuXG4oZGVmbi0gbG9nIFt4XSAoZG8gKC5sb2cgY29uc29sZSBcIngtPlwiIHgpIHgpKVxuXG4oZGVmbi0gbWFrZVxuICBbbG9jYWxSdW50aW1lXSAobGV0XG4gIFtUYXNrIChFbG0uTmF0aXZlLlRhc2subWFrZSBsb2NhbFJ1bnRpbWUpXVxuICAoZG8gKHNhbml0aXplIGxvY2FsUnVudGltZSA6TmF0aXZlIDpWRE9NdG9IVE1MKVxuICAgIChsZXQgW3YgbG9jYWxSdW50aW1lLk5hdGl2ZS5WRE9NdG9IVE1MLnZhbHVlc11cbiAgICAgIChpZiB2IHYgKHNldCEgbG9jYWxSdW50aW1lLk5hdGl2ZS5WRE9NdG9IVE1MLnZhbHVlcyB7XG4gICAgICAgIDp0b0hUTUwgKHJlcXVpcmUgOnZkb20tdG8taHRtbCl9KSkpKSkpXG5cbihzYW5pdGl6ZSBFbG0gOk5hdGl2ZSA6VkRPTXRvSFRNTClcbihzZXQhIEVsbS5OYXRpdmUuVkRPTXRvSFRNTC5tYWtlIG1ha2UpXG5cbihpZiAoPT0gKHR5cGVvZiB3aW5kb3cpIDp1bmRlZmluZWQpIChzZXQhIHdpbmRvdyBnbG9iYWwpKVxuIl19
